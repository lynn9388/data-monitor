package com.lynn9388.datamonitor.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import java.util.ArrayList;
import java.util.List;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "APP_LOG".
 */
public class AppLogDao extends AbstractDao<AppLog, Long> {

    public static final String TABLENAME = "APP_LOG";
    private DaoSession daoSession;
    ;
    private Query<AppLog> app_LogsQuery;
    private String selectDeep;

    public AppLogDao(DaoConfig config) {
        super(config);
    }

    public AppLogDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS " : "";
        db.execSQL("CREATE TABLE " + constraint + "\"APP_LOG\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"TIME\" INTEGER NOT NULL ," + // 1: time
                "\"UID\" INTEGER NOT NULL ," + // 2: uid
                "\"SEND_BYTES\" INTEGER NOT NULL ," + // 3: sendBytes
                "\"RECEIVE_BYTES\" INTEGER NOT NULL ," + // 4: receiveBytes
                "\"NETWORK_TYPE\" TEXT NOT NULL );"); // 5: networkType
    }

    /**
     * Drops the underlying database table.
     */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"APP_LOG\"";
        db.execSQL(sql);
    }

    /**
     * @inheritdoc
     */
    @Override
    protected void bindValues(SQLiteStatement stmt, AppLog entity) {
        stmt.clearBindings();

        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getTime().getTime());
        stmt.bindLong(3, entity.getUid());
        stmt.bindLong(4, entity.getSendBytes());
        stmt.bindLong(5, entity.getReceiveBytes());
        stmt.bindString(6, entity.getNetworkType());
    }

    @Override
    protected void attachEntity(AppLog entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /**
     * @inheritdoc
     */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }

    /**
     * @inheritdoc
     */
    @Override
    public AppLog readEntity(Cursor cursor, int offset) {
        AppLog entity = new AppLog( //
                cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
                new java.util.Date(cursor.getLong(offset + 1)), // time
                cursor.getInt(offset + 2), // uid
                cursor.getLong(offset + 3), // sendBytes
                cursor.getLong(offset + 4), // receiveBytes
                cursor.getString(offset + 5) // networkType
        );
        return entity;
    }

    /**
     * @inheritdoc
     */
    @Override
    public void readEntity(Cursor cursor, AppLog entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTime(new java.util.Date(cursor.getLong(offset + 1)));
        entity.setUid(cursor.getInt(offset + 2));
        entity.setSendBytes(cursor.getLong(offset + 3));
        entity.setReceiveBytes(cursor.getLong(offset + 4));
        entity.setNetworkType(cursor.getString(offset + 5));
    }

    /**
     * @inheritdoc
     */
    @Override
    protected Long updateKeyAfterInsert(AppLog entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }

    /**
     * @inheritdoc
     */
    @Override
    public Long getKey(AppLog entity) {
        if (entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /**
     * @inheritdoc
     */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }

    /**
     * Internal query to resolve the "logs" to-many relationship of App.
     */
    public List<AppLog> _queryApp_Logs(int uid) {
        synchronized (this) {
            if (app_LogsQuery == null) {
                QueryBuilder<AppLog> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Uid.eq(null));
                app_LogsQuery = queryBuilder.build();
            }
        }
        Query<AppLog> query = app_LogsQuery.forCurrentThread();
        query.setParameter(0, uid);
        return query.list();
    }

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getAppDao().getAllColumns());
            builder.append(" FROM APP_LOG T");
            builder.append(" LEFT JOIN APP T0 ON T.\"UID\"=T0.\"UID\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }

    protected AppLog loadCurrentDeep(Cursor cursor, boolean lock) {
        AppLog entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        App app = loadCurrentOther(daoSession.getAppDao(), cursor, offset);
        if (app != null) {
            entity.setApp(app);
        }

        return entity;
    }

    public AppLog loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();

        String[] keyArray = new String[]{key.toString()};
        Cursor cursor = db.rawQuery(sql, keyArray);

        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }

    /**
     * Reads all available rows from the given cursor and returns a list of new ImageTO objects.
     */
    public List<AppLog> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<AppLog> list = new ArrayList<AppLog>(count);

        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }

    protected List<AppLog> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }

    /**
     * A raw-style query where you can pass any WHERE clause and arguments.
     */
    public List<AppLog> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }

    /**
     * Properties of entity AppLog.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Time = new Property(1, java.util.Date.class, "time", false, "TIME");
        public final static Property Uid = new Property(2, int.class, "uid", false, "UID");
        public final static Property SendBytes = new Property(3, long.class, "sendBytes", false, "SEND_BYTES");
        public final static Property ReceiveBytes = new Property(4, long.class, "receiveBytes", false, "RECEIVE_BYTES");
        public final static Property NetworkType = new Property(5, String.class, "networkType", false, "NETWORK_TYPE");
    }

}
