package com.lynn9388.datamonitor.dao;

import com.lynn9388.datamonitor.dao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "APP_LOG".
 */
public class AppLog {

    private Long id;
    /** Not-null value. */
    private java.util.Date time;
    private long appId;
    private long sendBytes;
    private long receiveBytes;
    /** Not-null value. */
    private String networkType;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient AppLogDao myDao;

    private App app;
    private Long app__resolvedKey;


    public AppLog() {
    }

    public AppLog(Long id) {
        this.id = id;
    }

    public AppLog(Long id, java.util.Date time, long appId, long sendBytes, long receiveBytes, String networkType) {
        this.id = id;
        this.time = time;
        this.appId = appId;
        this.sendBytes = sendBytes;
        this.receiveBytes = receiveBytes;
        this.networkType = networkType;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getAppLogDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    /** Not-null value. */
    public java.util.Date getTime() {
        return time;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setTime(java.util.Date time) {
        this.time = time;
    }

    public long getAppId() {
        return appId;
    }

    public void setAppId(long appId) {
        this.appId = appId;
    }

    public long getSendBytes() {
        return sendBytes;
    }

    public void setSendBytes(long sendBytes) {
        this.sendBytes = sendBytes;
    }

    public long getReceiveBytes() {
        return receiveBytes;
    }

    public void setReceiveBytes(long receiveBytes) {
        this.receiveBytes = receiveBytes;
    }

    /** Not-null value. */
    public String getNetworkType() {
        return networkType;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setNetworkType(String networkType) {
        this.networkType = networkType;
    }

    /** To-one relationship, resolved on first access. */
    public App getApp() {
        long __key = this.appId;
        if (app__resolvedKey == null || !app__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            AppDao targetDao = daoSession.getAppDao();
            App appNew = targetDao.load(__key);
            synchronized (this) {
                app = appNew;
            	app__resolvedKey = __key;
            }
        }
        return app;
    }

    public void setApp(App app) {
        if (app == null) {
            throw new DaoException("To-one property 'appId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.app = app;
            appId = app.getId();
            app__resolvedKey = appId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
