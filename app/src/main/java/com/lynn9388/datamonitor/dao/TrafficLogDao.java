package com.lynn9388.datamonitor.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.lynn9388.datamonitor.dao.TrafficLog;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TRAFFIC_LOG".
*/
public class TrafficLogDao extends AbstractDao<TrafficLog, Long> {

    public static final String TABLENAME = "TRAFFIC_LOG";

    /**
     * Properties of entity TrafficLog.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Time = new Property(1, java.util.Date.class, "time", false, "TIME");
        public final static Property SendBytes = new Property(2, long.class, "sendBytes", false, "SEND_BYTES");
        public final static Property ReceiveBytes = new Property(3, long.class, "receiveBytes", false, "RECEIVE_BYTES");
        public final static Property NetworkType = new Property(4, String.class, "networkType", false, "NETWORK_TYPE");
    };


    public TrafficLogDao(DaoConfig config) {
        super(config);
    }
    
    public TrafficLogDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TRAFFIC_LOG\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"TIME\" INTEGER NOT NULL ," + // 1: time
                "\"SEND_BYTES\" INTEGER NOT NULL ," + // 2: sendBytes
                "\"RECEIVE_BYTES\" INTEGER NOT NULL ," + // 3: receiveBytes
                "\"NETWORK_TYPE\" TEXT NOT NULL );"); // 4: networkType
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TRAFFIC_LOG\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, TrafficLog entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getTime().getTime());
        stmt.bindLong(3, entity.getSendBytes());
        stmt.bindLong(4, entity.getReceiveBytes());
        stmt.bindString(5, entity.getNetworkType());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public TrafficLog readEntity(Cursor cursor, int offset) {
        TrafficLog entity = new TrafficLog( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            new java.util.Date(cursor.getLong(offset + 1)), // time
            cursor.getLong(offset + 2), // sendBytes
            cursor.getLong(offset + 3), // receiveBytes
            cursor.getString(offset + 4) // networkType
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, TrafficLog entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTime(new java.util.Date(cursor.getLong(offset + 1)));
        entity.setSendBytes(cursor.getLong(offset + 2));
        entity.setReceiveBytes(cursor.getLong(offset + 3));
        entity.setNetworkType(cursor.getString(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(TrafficLog entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(TrafficLog entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
