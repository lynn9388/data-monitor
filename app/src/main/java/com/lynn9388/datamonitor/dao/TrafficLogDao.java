package com.lynn9388.datamonitor.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.lynn9388.datamonitor.dao.TrafficLog;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TRAFFIC_LOG".
*/
public class TrafficLogDao extends AbstractDao<TrafficLog, Long> {

    public static final String TABLENAME = "TRAFFIC_LOG";

    /**
     * Properties of entity TrafficLog.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Time = new Property(1, java.util.Date.class, "time", false, "TIME");
        public final static Property MobileRxBytes = new Property(2, long.class, "mobileRxBytes", false, "MOBILE_RX_BYTES");
        public final static Property MobileTxBytes = new Property(3, long.class, "mobileTxBytes", false, "MOBILE_TX_BYTES");
        public final static Property WifiRxBytes = new Property(4, long.class, "wifiRxBytes", false, "WIFI_RX_BYTES");
        public final static Property WifiTxBytes = new Property(5, long.class, "wifiTxBytes", false, "WIFI_TX_BYTES");
        public final static Property TotalRxBytes = new Property(6, long.class, "totalRxBytes", false, "TOTAL_RX_BYTES");
        public final static Property TotalTxBytes = new Property(7, long.class, "totalTxBytes", false, "TOTAL_TX_BYTES");
    };


    public TrafficLogDao(DaoConfig config) {
        super(config);
    }
    
    public TrafficLogDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TRAFFIC_LOG\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"TIME\" INTEGER NOT NULL ," + // 1: time
                "\"MOBILE_RX_BYTES\" INTEGER NOT NULL ," + // 2: mobileRxBytes
                "\"MOBILE_TX_BYTES\" INTEGER NOT NULL ," + // 3: mobileTxBytes
                "\"WIFI_RX_BYTES\" INTEGER NOT NULL ," + // 4: wifiRxBytes
                "\"WIFI_TX_BYTES\" INTEGER NOT NULL ," + // 5: wifiTxBytes
                "\"TOTAL_RX_BYTES\" INTEGER NOT NULL ," + // 6: totalRxBytes
                "\"TOTAL_TX_BYTES\" INTEGER NOT NULL );"); // 7: totalTxBytes
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TRAFFIC_LOG\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, TrafficLog entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getTime().getTime());
        stmt.bindLong(3, entity.getMobileRxBytes());
        stmt.bindLong(4, entity.getMobileTxBytes());
        stmt.bindLong(5, entity.getWifiRxBytes());
        stmt.bindLong(6, entity.getWifiTxBytes());
        stmt.bindLong(7, entity.getTotalRxBytes());
        stmt.bindLong(8, entity.getTotalTxBytes());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public TrafficLog readEntity(Cursor cursor, int offset) {
        TrafficLog entity = new TrafficLog( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            new java.util.Date(cursor.getLong(offset + 1)), // time
            cursor.getLong(offset + 2), // mobileRxBytes
            cursor.getLong(offset + 3), // mobileTxBytes
            cursor.getLong(offset + 4), // wifiRxBytes
            cursor.getLong(offset + 5), // wifiTxBytes
            cursor.getLong(offset + 6), // totalRxBytes
            cursor.getLong(offset + 7) // totalTxBytes
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, TrafficLog entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTime(new java.util.Date(cursor.getLong(offset + 1)));
        entity.setMobileRxBytes(cursor.getLong(offset + 2));
        entity.setMobileTxBytes(cursor.getLong(offset + 3));
        entity.setWifiRxBytes(cursor.getLong(offset + 4));
        entity.setWifiTxBytes(cursor.getLong(offset + 5));
        entity.setTotalRxBytes(cursor.getLong(offset + 6));
        entity.setTotalTxBytes(cursor.getLong(offset + 7));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(TrafficLog entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(TrafficLog entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
